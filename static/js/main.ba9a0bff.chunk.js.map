{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","useState","page","changePage","isTension","toggleTension","onUserSelection","userSelection","botOptions","botSelection","Math","floor","random","length","setTimeout","className","onClick","id","type","checked","onChange","htmlFor","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA4GeA,G,MAzGH,WAAO,IAAD,EACWC,mBAAS,SADpB,mBACTC,EADS,KACHC,EADG,OAEmBF,oBAAS,GAF5B,mBAETG,EAFS,KAEEC,EAFF,KAIVC,EAAkB,SAACC,GACvB,IAAMC,EAAa,CAAC,OAAQ,QAAS,YAC/BC,EAAeD,EAAWE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAWK,SACtET,GAAaD,EAAW,WACxBW,YAAW,WACa,SAAlBP,IACmB,SAAjBE,GAA+BN,EAAW,QACzB,UAAjBM,GAA+BN,EAAW,QACzB,aAAjBM,GAA+BN,EAAW,QAE1B,UAAlBI,IACmB,SAAjBE,GAA+BN,EAAW,OACzB,UAAjBM,GAA+BN,EAAW,QACzB,aAAjBM,GAA+BN,EAAW,SAE1B,aAAlBI,IACmB,SAAjBE,GAA+BN,EAAW,QACzB,UAAjBM,GAA+BN,EAAW,OACzB,aAAjBM,GAA+BN,EAAW,WAE/CC,EAAY,IAAO,IAGxB,OACE,yBAAKW,UAAU,OACH,UAATb,GACC,yBAAKa,UAAU,mBACb,qDACA,4BAAQC,QAAS,kBAAMb,EAAW,YAAlC,QACA,yBAAKY,UAAU,oBACb,2BAAOE,GAAG,UAAUC,KAAK,WAAWC,QAASf,EAAWgB,SAAU,kBAAMf,GAAeD,MACvF,2BAAOiB,QAAQ,WAAf,0BAEDjB,GACC,kBAAC,IAAMkB,SAAP,KACE,iDACA,qEACyC,6BADzC,mCAQE,WAATpB,GACC,yBAAKa,UAAU,oBACb,6BACE,4BAAQC,QAAS,kBAAMV,EAAgB,UACrC,uBAAGS,UAAU,qBACb,oCAEF,4BAAQC,QAAS,kBAAMV,EAAgB,WACrC,uBAAGS,UAAU,sBACb,qCAEF,4BAAQC,QAAS,kBAAMV,EAAgB,cACrC,uBAAGS,UAAU,yBACb,0CAKE,YAATb,GACC,yBAAKa,UAAU,qBACb,uBAAGA,UAAU,oBAGP,QAATb,GACC,yBAAKa,UAAU,iBACb,uBAAGA,UAAU,kBACb,wCACA,6BACE,4BAAQC,QAAS,kBAAMb,EAAW,YAAlC,WACA,4BAAQa,QAAS,kBAAMb,EAAW,WAAlC,mBAII,SAATD,GACC,yBAAKa,UAAU,kBACb,uBAAGA,UAAU,4BACb,yCACA,6BACE,4BAAQC,QAAS,kBAAMb,EAAW,YAAlC,WACA,4BAAQa,QAAS,kBAAMb,EAAW,WAAlC,mBAII,SAATD,GACC,yBAAKa,UAAU,kBACb,uBAAGA,UAAU,qBACb,4CACA,6BACE,4BAAQC,QAAS,kBAAMb,EAAW,YAAlC,WACA,4BAAQa,QAAS,kBAAMb,EAAW,WAAlC,sBCxFQoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba9a0bff.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [page, changePage] = useState(\"start\");\n  const [isTension, toggleTension] = useState(false);\n\n  const onUserSelection = (userSelection) => {\n    const botOptions = [\"rock\", \"paper\", \"scissors\"];\n    const botSelection = botOptions[Math.floor(Math.random() * botOptions.length)];\n    isTension && changePage(\"loading\");\n    setTimeout(() => {\n      if (userSelection === \"rock\") {\n        if (botSelection === \"rock\")     { changePage(\"draw\"); }\n        if (botSelection === \"paper\")    { changePage(\"lose\"); }\n        if (botSelection === \"scissors\") { changePage(\"win\");  }\n      }\n      if (userSelection === \"paper\") {\n        if (botSelection === \"rock\")     { changePage(\"win\");  }\n        if (botSelection === \"paper\")    { changePage(\"draw\"); }\n        if (botSelection === \"scissors\") { changePage(\"lose\"); }\n      }\n      if (userSelection === \"scissors\") {\n        if (botSelection === \"rock\")     { changePage(\"lose\"); }\n        if (botSelection === \"paper\")    { changePage(\"win\");  }\n        if (botSelection === \"scissors\") { changePage(\"draw\"); }\n      }\n    }, isTension ? 2000 : 0);\n  }\n\n  return (\n    <div className=\"App\">\n      {page === \"start\" && (\n        <div className=\"page page-start\">\n          <h1>Rock, Paper, Scissors</h1>\n          <button onClick={() => changePage(\"select\")}>Play</button>\n          <div className=\"tension-checkbox\">\n            <input id=\"tension\" type=\"checkbox\" checked={isTension} onChange={() => toggleTension(!isTension)}/>\n            <label htmlFor=\"tension\">With added tension...</label>\n          </div>\n          {isTension && (\n            <React.Fragment>\n              <h3>Epilepsy Warning!</h3>\n              <p>\n                Added tension contains flashing images.<br/>\n                Viewer discretion is advised.\n              </p>\n            </React.Fragment>\n          )}\n        </div>\n      )}\n      {page === \"select\" && (\n        <div className=\"page page-select\">\n          <div>\n            <button onClick={() => onUserSelection(\"rock\")}>\n              <i className=\"fas fa-hand-rock\"/>\n              <p>Rock</p>\n            </button>\n            <button onClick={() => onUserSelection(\"paper\")}>\n              <i className=\"fas fa-hand-paper\"/>\n              <p>Paper</p>\n            </button>\n            <button onClick={() => onUserSelection(\"scissors\")}>\n              <i className=\"fas fa-hand-scissors\"/>\n              <p>Scissors</p>\n            </button>\n          </div>\n        </div>\n      )}\n      {page === \"loading\" && (\n        <div className=\"page page-loading\">\n          <i className=\"fas fa-spinner\" />\n        </div>\n      )}\n      {page === \"win\" && (\n        <div className=\"page page-win\">\n          <i className=\"fas fa-trophy\"/>\n          <h2>You Won!</h2>\n          <div>\n            <button onClick={() => changePage(\"select\")}>Restart</button>\n            <button onClick={() => changePage(\"start\")}>Back To Start</button>\n          </div>\n        </div>\n      )}\n      {page === \"lose\" && (\n        <div className=\"page page-lose\">\n          <i className=\"fas fa-skull-crossbones\"/>\n          <h2>You Lost!</h2>\n          <div>\n            <button onClick={() => changePage(\"select\")}>Restart</button>\n            <button onClick={() => changePage(\"start\")}>Back To Start</button>\n          </div>\n        </div>\n      )}\n      {page === \"draw\" && (\n        <div className=\"page page-draw\">\n          <i className=\"fas fa-handshake\"/>\n          <h2>It's a Draw!</h2>\n          <div>\n            <button onClick={() => changePage(\"select\")}>Restart</button>\n            <button onClick={() => changePage(\"start\")}>Back To Start</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}